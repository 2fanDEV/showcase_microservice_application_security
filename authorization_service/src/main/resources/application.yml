#https://spring.io/guides/gs/service-registration-and-discovery/
#https://docs.spring.io/spring-kafka/docs/current/reference/html/

#defining server port and application name
spring:
    application:
        name: authorization-service
    #only activate on this specific profile
    config:
        activate:
            on-profile: dev
    # defining the database location, username and password
    # https://docs.liquibase.com/tools-integrations/springboot/springboot.html
    datasource:
        password: ${spring.liquibase.password}
        url: jdbc:postgresql://localhost:5434/backend_authorization_service_db
        username: ${spring.liquibase.user}
    # specifying the locations for the kafka message broker and setting the max request size as
    # otherwise the files would not be sent
    #https://docs.spring.io/spring-kafka/docs/current/reference/html/
    #https://manpreetsinghdor.medium.com/spring-kafka-testing-your-kafka-broker-in-local-50eee361deb6
    kafka:
        bootstrap-servers: SSL://localhost:9092
        producer:
            properties:
                max:
                    request:
                        size: 200000000
        # setting the security protocol
        security:
            protocol: SSL
        # inserting the ssl certificates for the kafka client
        # https://www.baeldung.com/spring-boot-kafka-ssl
        ssl:
            key-store-location: classpath:microservices.p12
            key-store-password: 123456
            key-store-type: PKCS12
            trust-store-location: classpath:microservices.p12
            trust-store-password: 123456
            trust-store-type: PKCS12
    # telling liquibase where to locate the db changelogs
    #https://docs.liquibase.com/tools-integrations/springboot/springboot.html
    liquibase:
        change-log: classpath:/db/changelog/db.changelog-master.xml
        driver-class-name: org.postgresql.Driver
        enabled: true
        password: SqBJ2iD!iKynBwW2%Q3@&66H&PgM7
        url: jdbc:postgresql://localhost:5434/backend_authorization_service_db
        user: authorization-admin-service
    # defining the location for the public key to validate incoming requests
    security:
        oauth2:
            resourceserver:
                jwt:
                    issuer-uri: https://localhost:8977
                    jwk-set-uri: https://localhost:8977/oauth2/jwks


# inserting a truststore causes an error that I'm not able to resolve
# this helped in achieving mTLS https://dzone.com/articles/hakky54mutual-tls-1
server:
    port: 8977
    ssl:
        #defining mTLS that incoming requests must also show their certificate
        # this certificate has to be in the applied truststore which is set in the SSLConfiguration class
        client-auth: need
        enabled: true
        key-alias: microservices
        key-store: classpath:microservices.p12
        key-store-password: 123456

#https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/
#specificy where the eureka server is located and if registering is necessary, or is not necessary and obviously to
# fetch the current registry upon registering
eureka:
    client:
        eureka-server-location: localhost
        eureka-server-port: 8762
        fetch-registry: true
        register-with-eureka: true
        service-url:
            # defining location of eurekaserver tiwth http basic pw
            defaultZone: https://admin:admin@${eureka.client.eureka-server-location}:${eureka.client.eureka-server-port}/eureka/
        tls:
            key-password: 123456
            key-store: classpath:microservices.p12
            key-store-type: PKCS12
    # registering with eureka information about this server
    # telling eureka that a non secure port is not enabled and only approachable via https
    instance:
        hostname: localhost
        instance-id: ${eureka.instance.hostname}:${eureka.instance.secure-port}
        non-secure-port-enabled: false
        secure-port: 8977
        secure-port-enabled: true
    # setting the logging configuration,
    # which is the logback-spring.xml file at the resources folder
    # as we use a different name
    # for the file
    # https://docs.spring.io/spring-boot/docs/1.5.x/reference/html/howto-logging.html
logging:
    config: classpath:logback-spring.xml
---
## DOCKER ENVIRONMENT
# I know how to create docker container and docker compose files
# and with usage of environments inside of docker
# I do not have any clue on how to network with docker containers
# However I do know, that it is possible on Windows and Mac to access the hostmachines network with host.docker.internal
# the above configuration is copied and adjusted for these services to run on docker containers for a docker profile.


spring:
    application:
        name: authorization-service
    config:
        activate:
            on-profile: docker
    datasource:
        password: ${spring.liquibase.password}
        url: jdbc:postgresql://host.docker.internal:5434/backend_authorization_service_db
        username: ${spring.liquibase.user}
    kafka:
        bootstrap-servers: SSL://host.docker.internal:9092
        producer:
            bootstrap-servers: SSL://host.docker.internal:9092
            properties:
                max:
                    request:
                        size: 200000000
        security:
            protocol: SSL
        ssl:
            # inside the docker containers after creating .jar files, the certificate were not found by the
            # kafka-client and this stackoverflow link helped me to overcome this problem.
            #https://stackoverflow.com/questions/51200107/spring-kafka-ssl-setup-in-spring-boot-application-yml
            key-store-location: file:///app/authorization_service/microservices.p12
            key-store-password: 123456
            key-store-type: PKCS12
            trust-store-location: file:///app/authorization_service/microservices.p12
            trust-store-password: 123456
            trust-store-type: PKCS12
        admin:
            properties:
              bootstrap.servers: SSL://host.docker.internal:9092

    liquibase:
        change-log: classpath:/db/changelog/db.changelog-master.xml
        driver-class-name: org.postgresql.Driver
        enabled: true
        password: SqBJ2iD!iKynBwW2%Q3@&66H&PgM7
        url: jdbc:postgresql://host.docker.internal:5434/backend_authorization_service_db
        user: authorization-admin-service
    security:
        oauth2:
            resourceserver:
                jwt:
                    issuer-uri: https://host.docker.internal:8977
                    jwk-set-uri: https://host.docker.internal:8977/oauth2/jwks
server:
    port: 8977
    ssl:
        client-auth: need
        enabled: true
        key-alias: microservices
        key-store: ./microservices.p12
        key-store-password: 123456
eureka:
    client:
        eureka-server-location: host.docker.internal
        eureka-server-port: 8762
        fetch-registry: true
        register-with-eureka: true
        service-url:
        # https://cloud.spring.io/spring-cloud-static/Dalston.SR5/multi/multi__service_discovery_eureka_clients.html
            defaultZone: https://admin:admin@${eureka.client.eureka-server-location}:${eureka.client.eureka-server-port}/eureka/
    tls:
        key-password: 123456
        key-store: file:///app/authorization_service/microservices.p12
        key-store-type: PKCS12
    instance:
        hostname: host.docker.internal
        instance-id: ${eureka.instance.hostname}:${eureka.instance.secure-port}
        non-secure-port-enabled: false
        secure-port: 8977
        secure-port-enabled: true
logging:
    config: classpath:logback-spring.xml


